1. Write a script shell that gets as an input (argumens) 3 directories followed by a list of files. The script will copy the files that contain at least 10 lines with more than 5 words in directory 1, 
and the files that contain at least 10 lines with less than 5 words in directory 2. For the files that do not match any criteria, it will move them to directory 3.

if [ $# -le 3 ]; then
	echo "Not enough arguments were given"

elif [ ! -d $1 ]; then
	echo "Not a directory"
elif [ ! -d $2 ]; then
	echo "Not a directory"
elif [ ! -d $3 ]; then
	echo "Not a directory"
else
	shift 3
	for file in $*
	do
		n=`wc -l $file | awk '{print $1}'`
		if [ $n -le 10 ]; then
			mv $file ./dir3/$file
		else
			nr_words=`wc -w $file | awk '{print $1}'`
			if [ $nr_words -le 5 ]; then
				mv $file ./dir2/$file
			else
				mv $file ./dir1/$file
			fi
		fi
	done
fi

2. Write a shell script that it will iterate over the homedirectories of the users existing in the system and it will display on the screen for each one of them, their username and the sum of the file sizes found in it (files needs to be searched recursively).

declare -i sum
find $D -type d | { while read D
do
	sum=0
	n=0
	find $D -type f | { while read F
	do
		n=`ls -l "$F" 2>/dev/null | awk '{print $5}' 2>/dev/null`
		sum=`expr $sum + $n`
	done
	echo $D has total sum $sum
	}
done
}


3. Write a shell script that it will continously monitor a directory and it will display a message on the screen if for any of the existing files in that directory there was added a word that start and ends with a vowel (will be considered only files from the first level).

D=$1
if [ -z "$D" ]; then
	echo "No directory provided for monitoring"
	exit 1
fi

if [ ! -d "$D" ]; then
	echo "This directory does not exist"
	exit 1
fi
declare -i WC
declare -i nr
declare -i lenS
declare -i lenSTATE
declare S
declare STATE
while true {
do
	nr=$((nr+1))
	lenS=0
	while read P
	do
		if [ -f $P ]; then
			if !(grep -q -c ".swp" "$P"); then
				WC=`grep -o '\b[aeiou].*[aeiou]\b' $P | wc -w`
			fi
		fi
		lenS=$((lenS+WC))
	done <<< "$(find $D)"
	if [ $nr -ge 3 ] && [ $lenS -ne $lenSTATE ]; then
		echo "---------------------A word was added"
	else
		echo "No new words were added"
	fi
	lenSTATE=$lenS
	sleep 5
done
}

4. Write a shell script that will sort all the words from a file in ascending order (the sorted result must be saved in the same file).

F=$1

sed 's@\s@\n@g' $F | sort | grep -v "^$" >> new_file.txt

5. Write a shell script that will verify if a list of N numbers (N given as argument) read from the keyboard are prime or not.

N=$1

for i in $(seq $N)
do
	read nr
	if [ $nr -le 1 ]; then
		echo Number $nr is not prime
	elif [ $nr -eq 2 ]; then
		echo Number $nr is prime
	else
		found=0
		for i in $(seq 2 $((nr-1)))
		do
			x=`expr $nr % $i`
			if [ $x -eq 0 ]; then
				echo Number $nr is not prime
				found=1
				break
			fi
		done
		if [ $found -eq 0 ]; then
			echo Number $nr is prime
		fi
	fi
done


6. Write a shell script that will sort a list of numbers using bubble sort.

for i in $*; do
	a[$nr]=$i
	nr=$((nr+1))
done
i=0
j=0
for i in $(seq 0 $((nr-1))); do
	for j in $(seq $((i+1)) $((nr-1))); do
		if [[ ${a[$i]} -gt ${a[$j]} ]]; then
			aux=${a[$i]}
			a[$i]=${a[$j]}
			a[$j]=$aux
		fi
	done
done

for i in $(seq 0 $((nr-1))); do
	echo ${a[$i]}
done

7. Write a shell script that based on a number (argument 1) and a pattern type (argument 2) will generate and display on the screen a structure like:
Pattern 1
Input: 6
Output:
     #
    ##
   ###
  ####
 #####
######

Pattern 2:
Input: 3
Output:
    #
   ###
  #####


#!/bin/bash

nr=$1
type=$2

if [ $type -eq 1 ]; then
	for i in $(seq 1 $nr); do
		for j in $(seq 0 $((nr-i))); do
			echo -n " "
		done
		for j in $(seq 1 $((i))); do
			echo -n "#"
		done
		echo ""
	done

elif [ $type -eq 2 ]; then
	spaces=$((nr-1))
	for i in $(seq 0 $((nr-1))); do
		for j in $(seq 0 $spaces); do
			echo -n " "
		done
		for j in $(seq 1 $((i*2+1))); do
			echo -n "#"
		done
		for j in $(seq 0 $(((nr-i)/2))); do
			echo -n " "
		done
		echo ""
		spaces=$((spaces-1))
	done
fi

